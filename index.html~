<!doctype html>
<html itemscope="" itemtype="http://schema.org/WebPage" lang="en">
	<head>
		<link rel="shortcut icon" href="/favicon32.gif" type="image/x-icon" sizes="32x32" />
		<link rel="shortcut icon" href="/favicon16.gif" type="image/x-icon" sizes="16x16" />
		<meta name="viewport" content="width=device-width, initial-scale=1">
		
		<title>SVGnest - Free and Open Source nesting for CNC machines, lasers and plasma cutters</title>
		
		<meta name="description" content="A completely free and open source application for automatic nesting. Comes with advanced features like part-in-part nesting and concave area detection." />
		
		<link type="text/css" rel="stylesheet" media="all" href="font/latolatinfonts.css" />
		<link rel="stylesheet" type="text/css" href="style.css" />
		
		<script src="util/pathsegpolyfill.js"></script>
		<script src="util/matrix.js"></script>
		<script src="util/domparser.js"></script>
		<script src="util/clipper.js"></script>
		<script src="util/parallel.js"></script>
		<script src="util/geometryutil.js"></script>
		<script src="util/placementworker.js"></script>
		<script src="svgparser.js"></script>
		<script src="svgnest.js"></script>
		
		<script src="util/filesaver.js"></script>
		
		<script>
		// UI-specific stuff, button clicks go here
		function ready(fn){
			if (document.readyState != 'loading'){
				fn();
			}
			else {
				document.addEventListener('DOMContentLoaded', fn);
			}
		}
		
		ready(function(){
			// FAQ toggle
			var faq = document.getElementById('faq');
			var faqbutton = document.getElementById('faqbutton');
			
			var faqvisible = false;
			faqbutton.onclick = function(e){
				if(!faqvisible){
					faq.setAttribute('style','display: block');
				}
				else{
					faq.removeAttribute('style');
				}
				faqvisible = !faqvisible;
			};
			
			function hideSplash(){
				var splash = document.getElementById('splash');
				var svgnest = document.getElementById('svgnest');
				if(splash){
					splash.remove();
				}
				svgnest.setAttribute('style','display: block');
			}
			
			var demo = document.getElementById('demo');
			var upload = document.getElementById('upload');
			var display = document.getElementById('select');
			
			demo.onclick = function(){
				try{
					var svg = window.SvgNest.parsesvg(display.innerHTML);
					display.innerHTML = '';
					display.appendChild(svg);
				}
				catch(e){
					message.innerHTML = e;
					message.className = 'error animated bounce';
					return;
				}			
				
				hideSplash();
				message.innerHTML = 'Click on the outline to use as the bin';
				message.className = 'active animated bounce';
				
				attachSvgListeners(svg);
			};
			
			var message = document.getElementById('message');
			
			if(!document.createElementNS || !document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect){
				message.innerHTML = 'Your browser does not have SVG support';
				message.className = 'error animated bounce';
				return
			}
			
			if (!window.SvgNest) {
				message.innerHTML = "Couldn't initialize SVGnest";
				message.className = 'error animated bounce';
				return;
			}
			
			if(!window.File || !window.FileReader){
				message.innerHTML = 'Your browser does not have file upload support';
				message.className = 'error animated bounce';
				return
			}
			
			if(!window.Worker){
				message.innerHTML = 'Your browser does not have web worker support';
				message.className = 'error animated bounce';
				return
			}
			
			// button clicks
			var upload = document.getElementById('upload');
			var start = document.getElementById('start');
			var download = document.getElementById('download');
			var startlabel = document.getElementById('startlabel');
			var fileinput = document.getElementById('fileinput');
			
			var config = document.getElementById('config');
			var configbutton = document.getElementById('configbutton');
			var configsave = document.getElementById('configsave');
			
			var zoomin = document.getElementById('zoominbutton');
			var zoomout = document.getElementById('zoomoutbutton');
			var exit = document.getElementById('exitbutton');
			
			var isworking = false;
			
			start.onclick = function(){
				if(this.className == 'button start disabled'){
					return false;
				}
				iterations = 0;
				if(isworking){
					stopnest();
				}
				else{
					startnest();
				}
				
				display.className = 'disabled';
				document.getElementById('info_time').setAttribute('style','display: none');
			};
			
			function startnest(){
				// Once started, don't allow this anymore
				document.removeEventListener('dragover', FileDragHover, false);
				document.removeEventListener('dragleave', FileDragHover, false);
				document.removeEventListener('drop', FileDrop, false);
				
				SvgNest.start(progress, renderSvg);
				startlabel.innerHTML = 'Stop Nest';
				start.className = 'button spinner';
				configbutton.className = 'button config disabled';
				config.className = '';
				zoomin.className = 'button zoomin disabled';
				zoomout.className = 'button zoomout disabled';
				
				var svg = document.querySelector('#select svg');
				if(svg){
					svg.removeAttribute('style');
				}
				
				isworking = true;
			}
			
			function stopnest(){
				SvgNest.stop();
				startlabel.innerHTML = 'Start Nest';
				start.className = 'button start';
				configbutton.className = 'button config';
				
				isworking = false;
			}
			
			// config
			var configvisible = false;
			configbutton.onclick = function(){
				if(this.className == 'button config disabled'){
					return false;
				}
				if(!configvisible){
					config.className = 'active';
					configbutton.className = 'button close';
				}
				else{
					config.className = '';
					configbutton.className = 'button config';
				}
				configvisible = !configvisible;
				
				return false;
			}
			
			configsave.onclick = function(){
				var c = {};
				var inputs = document.querySelectorAll('#config input');
				for(var i=0; i<inputs.length; i++){
					var key = inputs[i].getAttribute('data-config');
					if(inputs[i].getAttribute('type') == 'text'){
						c[key] = inputs[i].value;
					}
					else if(inputs[i].getAttribute('type') == 'checkbox'){
						c[key] = inputs[i].checked;
					}
				}
				
				window.SvgNest.config(c);
				
				// new configs will invalidate current nest
				if(isworking){
					stopnest();
				}
				configvisible = false;
				config.className = '';
				return false;
			}
			
			upload.onclick = function(){
				fileinput.click();
			}
			document.addEventListener('dragover', FileDragHover, false);
			document.addEventListener('dragleave', FileDragHover, false);
			document.addEventListener('drop', FileDrop, false);
			function FileDragHover(e){
				e.stopPropagation();
				e.preventDefault();
				upload.style.backgroundColor = (e.type == "dragover" ? "#d7e9b7" : "");
			}
			function FileDrop(e){
				e.stopPropagation(); // Make sure not to replace website by file
				e.preventDefault();
				handleFile(e.dataTransfer.files[0]);
			}
			
			
			download.onclick = function(){
				if(download.className == 'button download disabled'){
					return false;
				}
				
				var bins = document.getElementById('bins');
				
				if(bins.children.length == 0){
					message.innerHTML = 'No SVG to export';
					message.className = 'error animated bounce';
					return
				}
				
				var svg;
				svg = display.querySelector('svg');
				
				if(!svg){
					svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')
				}
				
				svg = svg.cloneNode(false);
				
				// maintain stroke, fill etc of input
				if(SvgNest.style){
					svg.appendChild(SvgNest.style);
				}
				
				var binHeight = parseInt(bins.children[0].getAttribute('height'));
				
				for(var i=0; i<bins.children.length; i++){
					var b = bins.children[i];
					var group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
					group.setAttribute('transform', 'translate(0 '+binHeight*1.1*i+')');
					for(var j=0; j<b.children.length; j++){
						group.appendChild(b.children[j].cloneNode(true));
					}
					
					svg.appendChild(group);
				}
				
				var output;
				if(typeof XMLSerializer != 'undefined'){
					output = (new XMLSerializer()).serializeToString(svg);
				}
				else{
					output = svg.outerHTML;
				}
				
				var blob = new Blob([output], {type: "image/svg+xml;charset=utf-8"});
				saveAs(blob, "SVGnest-output.svg");
			}
			
			var zoomlevel = 1.0;
			
			zoomin.onclick = function(){
				if(this.className == 'button zoomin disabled'){
					return false;
				}
				zoomlevel *= 1.2;
				var svg = document.querySelector('#select svg');
				if(svg){
					svg.setAttribute('style', 'transform-origin: top left; transform:scale('+zoomlevel+'); -webkit-transform:scale('+zoomlevel+'); -moz-transform:scale('+zoomlevel+'); -ms-transform:scale('+zoomlevel+'); -o-transform:scale('+zoomlevel+');');
				}
			}
			
			zoomout.onclick = function(){
				if(this.className == 'button zoomout disabled'){
					return false;
				}
				zoomlevel *= 0.8;
				if(zoomlevel < 0.02){
					zoomlevel = 0.02;
				}
				var svg = document.querySelector('#select svg');
				if(svg){
					svg.setAttribute('style', 'transform-origin: top left; transform:scale('+zoomlevel+'); -webkit-transform:scale('+zoomlevel+'); -moz-transform:scale('+zoomlevel+'); -ms-transform:scale('+zoomlevel+'); -o-transform:scale('+zoomlevel+');');
				}
			}
			
			exit.onclick = function(){
				location.reload();
			}
			
			fileinput.onchange = function(e){
				handleFile(e.target.files[0]);
			}
			
			
			function handleFile(file){
				if(!file){
					return;
				}

				if(!file.type || (file.type.search('svg') < 0 && file.type.search('xml') < 0 &&  file.type.search('text') < 0)){
					message.innerHTML = 'Only SVG files allowed';
					message.className = 'error animated bounce';
					return
				}
				
				var reader = new FileReader();
				var input = this;
				reader.onload = function(e) {
					input.value = null;
					
					if(reader.result){
						try{
							var svg = window.SvgNest.parsesvg(reader.result);
							{
								var wholeSVG = document.createElementNS("http://www.w3.org/2000/svg", "svg");
								// Copy relevant scaling info
								wholeSVG.setAttribute('width',svg.getAttribute('width'));
								wholeSVG.setAttribute('height',svg.getAttribute('height'));
								wholeSVG.setAttribute('viewBox',svg.getAttribute('viewBox'));
								var rect = document.createElementNS(wholeSVG.namespaceURI,'rect');
								rect.setAttribute('x', wholeSVG.viewBox.baseVal.x);
								rect.setAttribute('y', wholeSVG.viewBox.baseVal.x);
								rect.setAttribute('width', wholeSVG.viewBox.baseVal.width);
								rect.setAttribute('height', wholeSVG.viewBox.baseVal.height);
								rect.setAttribute('class', 'fullRect');
								wholeSVG.appendChild(rect);
							}
							display.innerHTML = '';
							display.appendChild(wholeSVG); // As a default bin in background
							display.appendChild(svg);
						}
						catch(e){
							message.innerHTML = e;
							message.className = 'error animated bounce';
							return;
						}					
						
						hideSplash();
						message.innerHTML = 'Click on the outline to use as the bin';
						message.className = 'active animated bounce';
						start.className = 'button start disabled';
						
						attachSvgListeners(svg);
						attachSvgListeners(wholeSVG);
					}
				}
				
				reader.readAsText(file);
			};
			
			function attachSvgListeners(svg){
				// attach event listeners
				for(var i=0; i<svg.childNodes.length; i++){
					var node = svg.childNodes[i];
					if(node.nodeType == 1){
						node.onclick = function(){
							if(display.className == 'disabled'){
								return;
							}
							var currentbin = document.querySelector('#select .active');
							if(currentbin){
								var className = currentbin.getAttribute('class').replace('active', '').trim();
								if(!className)
									currentbin.removeAttribute('class');
								else
									currentbin.setAttribute('class', className);
							}
							
							window.SvgNest.setbin(this);
							this.setAttribute('class',(this.getAttribute('class') ? this.getAttribute('class')+' ' : '') + 'active');
							
							start.className = 'button start animated bounce';
							message.className = '';
						}
					}
				}
			}
			
			var prevpercent = 0;
			var startTime = null;
			
			function progress(percent){
				var transition = percent > prevpercent ? '; transition: width 0.1s' : '';
				document.getElementById('info_progress').setAttribute('style','width: '+Math.round(percent*100)+'% ' + transition);
				document.getElementById('info').setAttribute('style','display: block');
				
				prevpercent = percent;
				
				var now = new Date().getTime();
				if(startTime && now){
					var diff = now-startTime;
					// show a time estimate for long-running placements
					var estimate = (diff/percent)*(1-percent);
					document.getElementById('info_time').innerHTML = millisecondsToStr(estimate)+' remaining';
					
					if(diff > 5000 && percent < 0.3 && percent > 0.02 && estimate > 10000){
						document.getElementById('info_time').setAttribute('style','display: block');
					}
				}
				
				if(percent > 0.95 || percent < 0.02){
					document.getElementById('info_time').setAttribute('style','display: none');
				}
				if(percent < 0.02){
					startTime = new Date().getTime();
				}
			}
			
			var iterations = 0;
			
			function renderSvg(svglist, efficiency, placed, total){
				iterations++;
				document.getElementById('info_iterations').innerHTML = iterations;
				
				if(!svglist || svglist.length == 0){
					return;
				}
				var bins = document.getElementById('bins');
				bins.innerHTML = '';
				
				for(var i=0; i<svglist.length; i++){
					if(svglist.length > 2){
						svglist[i].setAttribute('class','grid');
					}
					bins.appendChild(svglist[i]);
				}
				
				if(efficiency || efficiency === 0){
					document.getElementById('info_efficiency').innerHTML = Math.round(efficiency*100);
				}

				document.getElementById('info_placed').innerHTML = placed+'/'+total;
				
				document.getElementById('info_placement').setAttribute('style','display: block');
				display.setAttribute('style','display: none');
				download.className = 'button download animated bounce';
			}
			
			message.onclick = function(e){
				this.className='';
			}
			
			function millisecondsToStr (milliseconds) {
				function numberEnding (number) {
					return (number > 1) ? 's' : '';
				}

				var temp = Math.floor(milliseconds / 1000);
				var years = Math.floor(temp / 31536000);
				if (years) {
					return years + ' year' + numberEnding(years);
				}
				var days = Math.floor((temp %= 31536000) / 86400);
				if (days) {
					return days + ' day' + numberEnding(days);
				}
				var hours = Math.floor((temp %= 86400) / 3600);
				if (hours) {
					return hours + ' hour' + numberEnding(hours);
				}
				var minutes = Math.floor((temp %= 3600) / 60);
				if (minutes) {
					return minutes + ' minute' + numberEnding(minutes);
				}
				var seconds = temp % 60;
				if (seconds) {
					return seconds + ' second' + numberEnding(seconds);
				}
				return 'less than a second';
			}
		});
		</script>
	</head>
	<body>
		<div id="splash">
			<!-- a small splash page that explains what this thing is -->
			<img src="img/logo.svg" alt="SVGnest" class="logo" />
			<h1 class="title">SVGnest</h1>
			<em class="subscript">Open Source nesting</em>
			
			<ul class="nav">
				<li class="button start" id="demo">Demo</li>
				<li class="button upload" id="upload">Upload SVG</li>
				<li class="button code" onclick="window.open('https://github.com/Jack000/SVGnest')"><a href="https://github.com/Jack000/SVGnest" target="_blank">Github</a></li>
				<li class="button" id="faqbutton">FAQ</li>
			</ul>
			
			<div id="faq">
				<h1>What exactly is "nesting"?</h1>
				<p>If you have some parts to cut out of a piece of metal/plastic/wood etc, you'd want to arrange the parts to use as little material as possible. This is a common problem if you use a laser cutter, plasma cutter, or CNC machine.</p>
				<p>In computer terms this is called the irregular bin-packing problem</p>
				
				<h1>How much does it cost?</h1>
				<p>It's free and open source. The code and implementation details are on <a href="https://github.com/Jack000/SVGnest" target="_blank">Github</a></p>
				
				<h1>Does it use inches? mm?</h1>
				<p>SVG has its internal units, the distance related fields in the settings use SVG units, ie. pixels. The conversion between a pixel and real units depend on the exporting software, but it's typically 72 pixels = 1 inch</p>
				
				<h1>My SVG text/image doesn't show up?</h1>
				<p>Nesting only works for closed shapes, so SVG elements that don't represent closed shapes are removed. Convert text and any other elements to outlines first. Ensure that outlines do not intersect or overlap eachother. Outlines that are inside other outlines are considered holes.</p>
				
				<h1>It doesn't ever stop?</h1>
				<p>The software will continuously look for better solutions until you press the stop button. You can stop at any time and download the SVG file.</p>
				
				<h1>Some parts seem to slightly overlap?</h1>
				<p>Curved shapes are approximated with line segments. For a more accurate nest with curved parts, decrease the curve tolerance parameter in the configuration.</p>
				
				<h1>I need help?</h1>
				<p>Add an issue on Github or contact me personally: <a href="http://jack.works">jack.works</a>
			</div>
		</div>
		
		<div id="svgnest">
					
			<div id="controls">
				<ul class="nav">
				<li class="button start disabled" id="start"><span id="startlabel">Start Nest</span></li>
				<li class="button download disabled" id="download">Download SVG</li>
				<li class="button config" id="configbutton"></li>
				<li class="button zoomin" id="zoominbutton"></li>
				<li class="button zoomout" id="zoomoutbutton"></li>
				<li class="button exit" id="exitbutton"></li>
				</ul>
				
				<div id="config">
					<div id="configwrapper">
						<input type="text" value="0" data-config="spacing" />
						<h3>Space between parts</h3><span class="tooltip" title="The space between parts in SVG units (conversion depends on exporting software but usually 1 SVG unit = 1px = 1/72 inches = 0.3527777~ mm)">?</span>
						
						<input type="text" value="0.3" data-config="curveTolerance" />
						<h3>Curve tolerance</h3><span class="tooltip" title="The maximum error allowed when converting Beziers and arcs to line segments. In SVG units. Smaller tolerances will take longer to compute">?</span>
						
						<input type="text" value="4" data-config="rotations" />
						<h3>Part rotations</h3><span class="tooltip" title="Number of rotations to consider when inserting a part. Larger rotations will take longer to compute, and may also take longer to converge to a good solution">?</span>
						
						<input type="text" value="10" data-config="populationSize" />
						<h3>GA population</h3><span class="tooltip" title="The number of solutions in the Genetic Algorithm population. Larger populations will converge slower but may result in better solutions in the long run">?</span>
						
						<input type="text" value="10" data-config="mutationRate" />
						<h3>GA mutation rate</h3><span class="tooltip" title="Mutation rate (in percent) at each generation of the Genetic Algorithm. A 100% mutation rate is equivalent to random sampling">?</span>
						
						<input type="checkbox" class="checkbox" data-config="useHoles" />
						<h3>Part in Part</h3><span class="tooltip" title="Place parts in the holes of other parts. This will take much longer to compute ">?</span>
						
						<input type="checkbox" class="checkbox" data-config="exploreConcave" />
						<h3>Explore concave areas</h3><span class="tooltip" title="Try to solve for enclosed concave areas (eg. a jigsaw puzzle piece) This will take much longer to compute ">?</span>
						
						<a href="#" class="button" id="configsave">Save Settings</a>
					</div>
				</div>
			</div>
			
			<div class="sidebar">				
				<div id="info">				
				<h2 id="info_time"></h2>
				<div class="progress"><div class="progress_inner" id="info_progress"></div></div>
				<span class="subscript">Placement progress</span>
				
				<div id="info_placement">
					<div class="column left">
						<h1 class="label"><span id="info_efficiency"></span><sup>%</sup></h1>
						<span class="subscript">Material Utilization</span>
					</div>
					
					<div class="column right">
						<h1 class="label" id="info_iterations"></h1>
						<span class="subscript">Iterations</span>
					</div>
					
					<div class="column left">
						<h1 class="label"><span id="info_placed"></span></h1>
						<span class="subscript">Parts placed</span>
					</div>
				</div>
				</div>				
			</div>
			
			<div id="select">
			<svg version="1.1" id="svg2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="1147.592px" height="1397.27px" viewBox="0 0 1147.592 1397.27" enable-background="new 0 0 1147.592 1397.27" xml:space="preserve">
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<polygon fill="none" stroke="#010101" stroke-miterlimit="10" points="891,704 928,705 937,715 1000,739 1045,812 1077,913 1069,983 1048,997 1025,994 1012,975 996,847 961,784 939,804 939,871 871,871 871,803 849,780 815,838 782,995 758,1005 736,992 729,972 731,918 745,852 775,777 814,730 856,711 891,705 "/>
<rect xmlns="http://www.w3.org/2000/svg" class="active" fill="none" stroke="#010101" width="1920" height="1080" />
</svg>

			</div>
			<div id="bins"></div>
			
			<input id="fileinput" type="file" style="visibility:hidden" />
		</div>
		
		<div id="messagewrapper">
			<div id="message"></div>
		</div>
	</body>
</html>
